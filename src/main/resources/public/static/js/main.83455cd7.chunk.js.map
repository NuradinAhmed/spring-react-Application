{"version":3,"sources":["components/MatchDetailCard.js","components/MatchSmallCard.js","pages/TeamPage.js","components/YearSelector.js","pages/MatchPage.js","components/TeamTile.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["MatchDetailCard","teamName","match","otherTeam","team1","team2","otherTeamRoute","isMatchWon","matchWinner","className","to","date","venue","resultMargin","result","playerOfMatch","umpire1","umpire2","MatchSmallCard","otherTaamRoute","TeamPage","useState","matches","team","setTeam","useParams","useEffect","a","fetch","process","response","json","data","fetchTeam","title","value","totalMatches","totalWins","color","slice","map","id","YearSelector","years","i","push","year","MatchPage","setMatches","fetchMatches","TeamTile","HomePage","teams","setTeams","fetchAllTeams","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83455cd7.chunk.js","sourcesContent":["import {React} from 'react';\n\n\nimport {Link } from 'react-router-dom';\n\nimport \"./MatchDetailCard.scss\";\n\n{/* and in here, i will get the teamName and match for the matchdetail card */}\nexport const MatchDetailCard = ({teamName, match}) => {\n\n  if(!match) return null;\n\n  const otherTeam = match.team1 === teamName ? match.team2 : match.team1;\n\n  const otherTeamRoute = `/teams/${otherTeam}`;\n\n  const isMatchWon = teamName === match.matchWinner;\n\n  return (\n    <div className={isMatchWon ? 'MatchDetailCard won-card' : 'MatchDetailCard lost-card'}>\n\n      <div>\n          <span className =\"vs\" > vs </span> \n\n          <h1> vs  <Link to= {otherTeamRoute}>     {otherTeam}  </Link>  </h1> \n\n          <h2 className =\"match-date\"> {match.date} </h2>\n\n          <h3 className =\"match-venue\"> at {match.venue}</h3>\n\n          <h4 className =\"match-result\"> {match.matchWinner} won by {match.resultMargin} {match.result}</h4>\n      </div>\n\n      <div className=\"additional-detial\">\n\n          <h3>First Innings</h3>\n\n          <p>{match.team1}</p>\n\n          <h3>Second Innings</h3>\n\n          <p>{match.team2}</p>\n\n          <h3>Man of the match</h3>\n\n          <p>{match.playerOfMatch}</p>\n\n          <h3>Umpires</h3>\n\n          <p>{match.umpire1}, {match.umpire2}</p>\n\n      </div>\n\n\n    </div>\n  );\n}","import {React} from 'react';\n\nimport './MatchSmallCard.scss';\n\nimport { Link } from 'react-router-dom'; {/* Link allows us to click teamName and gets its detials card match */}\n\n\n//Accepting the match as a paramter here in the matchsmallcard\nexport const MatchSmallCard = ({match, teamName}) => {\n  \n  if(!match) return null;\n  {/* apply same logic for getting only other team rather than bothteams*/}\n  const otherTeam = match.team1 === teamName ? match.team2 : match.team1;\n\n  const otherTaamRoute = `/teams/${otherTeam}`;\n\n  const isMatchWon = teamName === match.matchWinner;\n\n  return (\n    <div className={isMatchWon ? 'MatchSmallCard won-card' : 'MatchSmallCard lost-card'}>\n\n      <span className=\"vs\"> vs </span>\n\n      <h1> <Link to={otherTaamRoute}>  {otherTeam}    </Link>   </h1>\n\n      <p className=\"match-result\"> {match.matchWinner} won by {match.resultMargin} {match.result}</p>\n\n    </div>\n  );\n}","import {React, useEffect, useState} from 'react';\nimport {useParams, Link} from 'react-router-dom';\nimport { MatchDetailCard } from '../components/MatchDetailCard';\nimport { MatchSmallCard } from '../components/MatchSmallCard';\n\nimport './TeamPage.scss';\n\nimport { PieChart } from 'react-minimal-pie-chart';\n\n\n\nexport const TeamPage = () => {\n    /*\n        to maake the data available - we need to make the data stateful by using the state hook in react.\n        jsx can refer to the state and show that data.\n        Returns a stateful value, and a function to update it.\n        During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\n    */\n        //creating a state, team is state and setTeam is a way to populate that state\n    const [team, setTeam] = useState({matches: []});\n\n    const {teamName } = useParams();\n\n\n    /*By using this Hook -useEffect, we tell React that our component needs to do something after render. \n        React will remember the function we passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. \n        In this effect, we are performing data fetching or call some other imperative API.\n    */\n    useEffect(\n        () => {\n            //async/await syntax fits great with fetch() because it simplifies the work with promises.\n            const fetchTeam = async () => { //2. I want fetchMatches to be called-\n                const response = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/team/${teamName}`); //3.And the fetchMatches is making call to hardcoded uri \n                const data = await response.json();\n                //console.log(data);\n                setTeam(data); //4. the response is being set to this state setTeam.\n\n            };\n            fetchTeam();\n            \n            //1. when the component loads which is this empty array \n        },[teamName] //this is referd to as dependcy list: basically its an empty array and tells to only return first page when you load rather than \n            //rather than doing an infinit loop! \n    )\n\n    if(!team || !team.teamName) {\n        return <h1>Team not found!</h1>\n    }\n\n        //5. In my jsx, in this html, I am using team.teamName which is and rendering \n            //matchdetailcard -the first of the matches in the team object \n\n            //slice: slice(start?: number, end?: number): any[] The beginning of the specified portion of the array. Returns a section of an array.\n\n    return (\n    <div className=\"TeamPage\">\n\n        <div className=\"team-name-section\">\n\n            <h1 className=\"team-name\">{team.teamName}</h1> </div>\n        \n        <div className=\"win-loss-section\"> \n\n            Wins / Losses \n\n            <PieChart\n                data={[\n                    { title: 'Losses', value: team.totalMatches - team.totalWins, color: '#a34d5d' },\n\n                    { title: 'Wins', value: team.totalWins, color: '#4da375' },\n                ]}\n                />\n\n        </div>\n\n        <div className=\"match-detail-section\">\n            <h3>Latest Matches</h3>\n            <MatchDetailCard teamName = {team.teamName} match = {team.matches[0]}/>\n         </div> \n\n            {/* by having the team.teamName defined its going to show what the other team is rather than repeating main team vs so on*/}\n        {team.matches.slice(1).map(match => <MatchSmallCard key={match.id} teamName = {team.teamName} match = {match} />)}      \n      \n        <div className=\"more-link\">\n        \n        <Link to={`/teams/${teamName}/matches/${process.env.REACT_APP_DATA_END_YEAR}`}>More > </Link>\n        </div>\n    </div>\n  );\n}\n\n\n","\nimport { React } from 'react';\n\nimport {Link} from 'react-router-dom';\n\nimport './YearSelector.scss';\n\nexport const YearSelector = ({teamName}) => {\n\n    let years = []\n\n    const startYear = process.env.REACT_APP_DATA_START_YEAR;\n    const endYear = process.env.REACT_APP_DATA_END_YEAR;\n\n    for (let i = startYear; i <= endYear; i++) {\n        years.push(i);  //Appends new elements to an array, and returns the new length of the array.\n    }\n\n    //returning a list of the year and to do that we will an html list - semantic list that is clickable from the team name\n    return (\n        <ol className=\"YearSelector\">\n            { years.map(year => (\n                <li key={year}>\n\n                  <Link  to={`/teams/${teamName}/matches/${year}`}> {year} </Link>  \n                \n                \n                </li>\n\n            )) }\n        </ol>\n    )\n\n}","import {React, useEffect, useState} from 'react';\nimport {useParams} from 'react-router-dom';\nimport { MatchDetailCard } from '../components/MatchDetailCard';\n\n\nimport './MatchPage.scss';\nimport { YearSelector } from '../components/YearSelector';\n\n\nexport const MatchPage = () => {\n    \n\n    //going to define a state for the match API call: am saying my state = matches and the method calling to that state = setMatches\n    const [matches, setMatches] = useState([]);\n\n\n\n    const {teamName, year } = useParams();\n\n\n\n    useEffect(\n      () => {\n        //asych/await systnx fits great with fetch() b/c it simplifies the work with promise\n        const fetchMatches = async () => {\n\n          const response = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/team/${teamName}/matches?year=${year}`); //to read the param add $ to be read\n\n          const data = await response.json();\n          setMatches(data);\n        };\n\n        fetchMatches();\n\n      },[teamName, year] //when either of them change this has to update and make a call for the list year selector\n    )\n\n\n\n    return (\n    <div className=\"MatchPage\">\n\n      <div className=\"YearSelector\">\n          <h3> Select Year </h3>\n          <YearSelector teamName= {teamName}/>\n      </div>\n\n\n      {/* Create a div here to move the whole matches as one large column together to the right side.  */}\n      <div> \n\n      <h1 className=\"page-heading\">{teamName} matches in {year}</h1> \n\n\n        {\n          matches.map(match => <MatchDetailCard key={match.id}   teamName = {teamName} match = {match} />)\n        }\n\n      </div>\n    \n    </div>\n  );\n}\n\n\n\n","import { React } from 'react';\n\nimport './TeamTile.scss';\n\nimport {Link } from 'react-router-dom';\n\nexport const TeamTile = ({teamName}) => {\n\n    return (\n        <div className=\"TeamTile\">\n            <h1>\n                <Link to={`/teams/${teamName}`}>\n                    {teamName}\n                </Link>\n            </h1>\n        </div>\n    )\n\n}","import {React, useEffect, useState} from 'react';\n\nimport './HomePage.scss';\nimport { TeamTile } from '../components/TeamTile';\n\n\n\n\nexport const HomePage = () => {\n    /*\n        to maake the data available - we need to make the data stateful by using the state hook in react.\n        jsx can refer to the state and show that data.\n        Returns a stateful value, and a function to update it.\n        During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\n    */\n        //creating a state, teams is state and setTeams is a way to populate that state\n    const [teams, setTeams] = useState([]); //the default will be an array for \n\n\n    /*By using this Hook -useEffect, we tell React that our component needs to do something after render. \n        React will remember the function we passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. \n        In this effect, we are performing data fetching or call some other imperative API.\n    */\n    useEffect(\n        () => {\n            //async/await syntax fits great with fetch() because it simplifies the work with promises.\n            const fetchAllTeams = async () => { //2. I want fetchMatches to be called-\n                const response = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/team`); //3.And the fetchMatches is making call to hardcoded uri \n                const data = await response.json();\n                //console.log(data);\n                setTeams(data); //4. the response is being set to this state setTeam.\n\n            };\n            fetchAllTeams();\n            \n            //1. when the component loads which is this empty array \n        },[] //this is referd to as dependcy list: basically its an empty array and tells to only return first page when you load rather than \n            //rather than doing an infinit loop! \n    )\n\n \n\n        //5. In my jsx, in this html, I am using team.teamName which is and rendering \n            //matchdetailcard -the first of the matches in the team object \n\n            //slice: slice(start?: number, end?: number): any[] The beginning of the specified portion of the array. Returns a section of an array.\n\n    return (\n    <div className=\"HomePage\">\n\n        <div className=\"header-section\">\n\n            <h1 className=\"app-name\">Nuradin Enterprise IPL Dashboard</h1> \n\n        </div>\n        \n        \n        <div className=\"team-grid\"> \n            {teams.map(team => <TeamTile key={team.id} teamName= {team.teamName} /> )}\n        </div>\n\n    </div>\n  );\n}\n\n\n","import './App.scss';\n\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport { TeamPage } from './pages/TeamPage';\nimport { MatchPage } from './pages/MatchPage';\nimport { HomePage } from './pages/HomePage';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      {/* This is our RouterTag that will allows us to define route that will contain a path */}\n      <Router>\n\n        <Switch>\n\n            <Route path=\"/teams/:teamName/matches/:year\">\n              < MatchPage/>\n\n            </Route>\n\n            <Route path=\"/teams/:teamName\">\n              <TeamPage/>\n            </Route>\n\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n\n        </Switch>\n\n      </Router>\n\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}